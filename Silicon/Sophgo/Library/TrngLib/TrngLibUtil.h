/*
 * Copyright (c) 2015 Elliptic Technologies Inc.
 * Copyright (c) 2024, SOPHGO Inc. All rights reserved.<BR>
 *
 * SPDX-License-Identifier: BSD-2-Clause-Patent
 */

#ifndef ELPCLP890_HW_H
#define ELPCLP890_HW_H
#include <Uefi.h>

#include <Library/BaseLib.h>
#include <Library/UefiLib.h>
#include <Library/IoLib.h>
#include <Library/UefiBootServicesTableLib.h>
#include <Library/MemoryAllocationLib.h>
#include <Library/BaseMemoryLib.h>
#include <Library/DebugLib.h>
#include <Protocol/FdtClient.h>
#include <Protocol/Cpu.h>

/* registers */
#define CLP890_REG_CTRL		0x00
#define CLP890_REG_MODE		0x04
#define CLP890_REG_SMODE	0x08
#define CLP890_REG_STAT		0x0C
#define CLP890_REG_IE		0x10
#define CLP890_REG_ISTAT	0x14
#define CLP890_REG_ALARM	0x18
#define CLP890_REG_COREKIT_REL	0x1C
#define CLP890_REG_FEATURES	0x20
#define CLP890_REG_RAND0	0x24
#define CLP890_REG_NPA_DATA0	0x34
#define CLP890_REG_SEED0	0x74
#define CLP890_REG_IA_RDATA	0xA4
#define CLP890_REG_IA_WDATA	0xA8
#define CLP890_REG_IA_ADDR	0xAC
#define CLP890_REG_IA_CMD	0xB0

/* CTRL */
#define CLP890_REG_CTRL_CMD_NOP			0
#define CLP890_REG_CTRL_CMD_GEN_NOISE		1
#define CLP890_REG_CTRL_CMD_GEN_NONCE		2
#define CLP890_REG_CTRL_CMD_CREATE_STATE	3
#define CLP890_REG_CTRL_CMD_RENEW_STATE		4
#define CLP890_REG_CTRL_CMD_REFRESH_ADDIN	5
#define CLP890_REG_CTRL_CMD_GEN_RANDOM		6
#define CLP890_REG_CTRL_CMD_ADVANCE_STATE	7
#define CLP890_REG_CTRL_CMD_KAT			8
#define CLP890_REG_CTRL_CMD_ZEROIZE		15

/* MODE */
#define CLP890_REG_MODE_ADDIN_PRESENT	BIT4
#define CLP890_REG_MODE_PRED_RESIST	BIT3
#define CLP890_REG_MODE_KAT_SEL		BIT2
#define CLP890_REG_MODE_KAT_VEC		BIT1
#define CLP890_REG_MODE_SEC_ALG         BIT0

/* SMODE */
#define CLP890_REG_SMODE_MAX_REJECTS_SHIFT	2
#define CLP890_REG_SMODE_SECURE_EN_SHIFT	1
#define CLP890_REG_SMODE_NONCE_SHIFT		0

#define CLP890_REG_SMODE_MAX_REJECTS(x) ((x) << CLP890_REG_SMODE_MAX_REJECTS_SHIFT)
#define CLP890_REG_SMODE_SECURE_EN(x)	((x) << CLP890_REG_SMODE_SECURE_EN_SHIFT)
#define CLP890_REG_SMODE_NONCE		BIT0

/* STAT */
#define CLP890_REG_STAT_LAST_CMD_SHIFT	0

#define CLP890_REG_STAT_BUSY		BIT31
#define CLP890_REG_STAT_DRBG_STATE	BIT7
#define CLP890_REG_STAT_SECURE		BIT6
#define CLP890_REG_STAT_NONCE_MODE	BIT5
#define CLP890_REG_STAT_SEC_ALG		BIT4
#define CLP890_REG_STAT_LAST_CMD(x)	(((x) >> CLP890_REG_STAT_LAST_CMD_SHIFT) & 0xF)

/* IE */
#define CLP890_REG_IE_GLBL		BIT31
#define CLP890_REG_IE_DONE		BIT4
#define CLP890_REG_IE_ALARMS		BIT3
#define CLP890_REG_IE_NOISE_RDY		BIT2
#define CLP890_REG_IE_KAT_COMPLETE	BIT1
#define CLP890_REG_IE_ZEROIZE		BIT0

/* ISTAT */
#define CLP890_REG_ISTAT_DONE		BIT4
#define CLP890_REG_ISTAT_ALARMS		BIT3
#define CLP890_REG_ISTAT_NOISE_RDY	BIT2
#define CLP890_REG_ISTAT_KAT_COMPLETE   BIT1
#define CLP890_REG_ISTAT_ZEROIZE	BIT0

/* ALARMS */
#define CLP890_REG_ALARM_ILLEGAL_CMD_SEQ			BIT4
#define CLP890_REG_ALARM_FAILED_TEST_ID_OK			0
#define CLP890_REG_ALARM_FAILED_TEST_ID_KAT_STAT		1
#define CLP890_REG_ALARM_FAILED_TEST_ID_KAT			2
#define CLP890_REG_ALARM_FAILED_TEST_ID_MONOBIT			3
#define CLP890_REG_ALARM_FAILED_TEST_ID_RUN			4
#define CLP890_REG_ALARM_FAILED_TEST_ID_LONGRUN			5
#define CLP890_REG_ALARM_FAILED_TEST_ID_AUTOCORRELATION		6
#define CLP890_REG_ALARM_FAILED_TEST_ID_POKER			7
#define CLP890_REG_ALARM_FAILED_TEST_ID_REPETITION_COUNT	8
#define CLP890_REG_ALARM_FAILED_TEST_ID_ADAPATIVE_PROPORTION	9

/* COREKIT_REL */
#define CLP890_REG_COREKIT_REL_EXT_ENUM(x) (((x) >> 28) & 0xF)
#define CLP890_REG_COREKIT_REL_EXT_VER(x)  (((x) >> 16) & 0xFF)
#define CLP890_REG_COREKIT_REL_NUM(x)      ((x) & 0xFFFF)

/* FEATURES */
#define CLP890_REG_FEATURES_AES_256(x)			(((x) >> 9) & 1)
#define CLP890_REG_FEATURES_EXTRA_PS_PRESENT(x)		(((x) >> 8) & 1)
#define CLP890_REG_FEATURES_DIAG_LEVEL_NS(x)		(((x) >> 7) & 1)
#define CLP890_REG_FEATURES_DIAG_LEVEL_CLP800(x)	(((x) >> 4) & 7)
#define CLP890_REG_FEATURES_DIAG_LEVEL_ST_HLT(x)	(((x) >> 1) & 7)
#define CLP890_REG_FEATURES_SECURE_RST_STATE(x)		((x) & 1)

/* IA_CMD */
#define CLP890_REG_IA_CMD_GO             BIT31
#define CLP890_REG_IA_CMD_WR             BIT0

#define _CLP890_REG_SMODE_MAX_REJECTS_MASK	255UL
#define _CLP890_REG_SMODE_SECURE_EN_MASK	1UL
#define _CLP890_REG_SMODE_NONCE_MASK		1UL
#define _CLP890_REG_MODE_SEC_ALG_MASK		1UL
#define _CLP890_REG_MODE_ADDIN_PRESENT_MASK	1UL
#define _CLP890_REG_MODE_PRED_RESIST_MASK	1UL

#define CLP890_REG_SMODE_SET_MAX_REJECTS(y, x)	(((y) & ~(_CLP890_REG_SMODE_MAX_REJECTS_MASK << CLP890_REG_SMODE_MAX_REJECTS_SHIFT)) | ((x) << CLP890_REG_SMODE_MAX_REJECTS_SHIFT))
#define CLP890_REG_SMODE_SET_SECURE_EN(y, x)	(((y) & ~(_CLP890_REG_SMODE_SECURE_EN_MASK   << CLP890_REG_SMODE_SECURE_EN_SHIFT))   | ((x) << CLP890_REG_SMODE_SECURE_EN_SHIFT))
#define CLP890_REG_SMODE_SET_NONCE(y, x)	(((y) & ~(_CLP890_REG_SMODE_NONCE_MASK       << CLP890_REG_SMODE_NONCE_SHIFT))       | ((x) << CLP890_REG_SMODE_NONCE_SHIFT))
#define CLP890_REG_SMODE_GET_MAX_REJECTS(x)	(((x) >> CLP890_REG_SMODE_MAX_REJECTS_SHIFT) & _CLP890_REG_SMODE_MAX_REJECTS_MASK)
#define CLP890_REG_SMODE_GET_SECURE_EN(x)	(((x) >> CLP890_REG_SMODE_SECURE_EN_SHIFT)   & _CLP890_REG_SMODE_SECURE_EN_MASK)
#define CLP890_REG_SMODE_GET_NONCE(x)		(((x) >> CLP890_REG_SMODE_NONCE_SHIFT)       & _CLP890_REG_SMODE_NONCE_MASK)

#define CLP890_REG_MODE_SET_SEC_ALG(y, x)	(((y) & ~(_CLP890_REG_MODE_SEC_ALG_MASK       << _CLP890_REG_MODE_SEC_ALG))       | ((x) << _CLP890_REG_MODE_SEC_ALG))
#define CLP890_REG_MODE_SET_PRED_RESIST(y, x)	(((y) & ~(_CLP890_REG_MODE_PRED_RESIST_MASK   << _CLP890_REG_MODE_PRED_RESIST))   | ((x) << _CLP890_REG_MODE_PRED_RESIST))
#define CLP890_REG_MODE_SET_ADDIN_PRESENT(y, x) (((y) & ~(_CLP890_REG_MODE_ADDIN_PRESENT_MASK << _CLP890_REG_MODE_ADDIN_PRESENT)) | ((x) << _CLP890_REG_MODE_ADDIN_PRESENT))
#define CLP890_REG_MODE_GET_SEC_ALG(x)		(((x) >> _CLP890_REG_MODE_SEC_ALG)       & _CLP890_REG_MODE_SEC_ALG_MASK)
#define CLP890_REG_MODE_GET_PRED_RESIST(x)	(((x) >> _CLP890_REG_MODE_PRED_RESIST)   & _CLP890_REG_MODE_PRED_RESIST_MASK)
#define CLP890_REG_MODE_GET_ADDIN_PRESENT(x)	(((x) >> _CLP890_REG_MODE_ADDIN_PRESENT) & _CLP890_REG_MODE_ADDIN_PRESENT_MASK)

#define CLP890_RETRY_MAX 5000000UL

typedef struct {
  UINT32          AlarmCode;
  UINT32          MaxReads;
  UINT32          ReadsLeft;
  UINT32          KeyLength;
  UINT32          CurrentState;
} TRNG_STATUS;

typedef struct {
  TRNG_STATUS Status;
  UINTN       RegBase;
} SOPHGO_TRNG_DRIVER;

enum {
  CLP890_STATE_KAT=0,
  CLP890_STATE_ZEROIZE,
  CLP890_STATE_SEEDING,
  CLP890_STATE_CREATE_STATE,
  CLP890_STATE_RENEW_STATE,
  CLP890_STATE_REFRESH_ADDIN,
  CLP890_STATE_GEN_RANDOM,
  CLP890_STATE_ADVANCE_STATE
};

EFI_STATUS
EFIAPI
Elpclp890WaitOnBusy (
  IN SOPHGO_TRNG_DRIVER *TrngDriver
  );

EFI_STATUS
EFIAPI
Elpclp890GetAlarms (
  IN SOPHGO_TRNG_DRIVER *TrngDriver
  );

EFI_STATUS
EFIAPI
Elpclp890SetNonce (
  IN SOPHGO_TRNG_DRIVER *TrngDriver,
  IN UINT32             Nonce
  );

EFI_STATUS
EFIAPI
Elpclp890WaitOnDone (
  IN SOPHGO_TRNG_DRIVER *TrngDriver
  );

EFI_STATUS
EFIAPI
Elpclp890WaitOnZeroize (
  IN SOPHGO_TRNG_DRIVER *TrngDriver
  );

EFI_STATUS
EFIAPI
Elpclp890CmdZeroize (
  IN SOPHGO_TRNG_DRIVER *TrngDriver
  );

EFI_STATUS
EFIAPI
Elpclp890CmdAdvanceState (
  IN SOPHGO_TRNG_DRIVER *TrngDriver
  );

EFI_STATUS
EFIAPI
Elpclp890CmdRenewState (
  IN SOPHGO_TRNG_DRIVER *TrngDriver
  );

EFI_STATUS
EFIAPI
Elpclp890CmdSeed (
  IN SOPHGO_TRNG_DRIVER *TrngDriver,
  IN UINT32             *Seed
  );

EFI_STATUS
EFIAPI
Elpclp890CmdCreateState (
  IN SOPHGO_TRNG_DRIVER *TrngDriver,
  IN UINT32             *Ps
  );

EFI_STATUS
EFIAPI
Elpclp890CmdGenRandom (
  IN SOPHGO_TRNG_DRIVER *TrngDriver,
  IN UINT32             NumReads,
  IN UINT32             *Rand
  );

EFI_STATUS
EFIAPI
Elpclp890Init (
  IN SOPHGO_TRNG_DRIVER *TrngDriver,
  IN UINT32             MaxReads
  );
#endif
